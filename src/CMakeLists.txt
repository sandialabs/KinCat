# higher cmake version is required as Kokkos needs it
CMAKE_MINIMUM_REQUIRED(VERSION 3.16)

# Project KINCAT
PROJECT(KINCAT VERSION 1.0.2 LANGUAGES C CXX)

# Built-in modules
INCLUDE(GNUInstallDirs)
INCLUDE(CMakePackageConfigHelpers)

# CMAKE setup
#SET(CMAKE_VERBOSE_MAKEFILE ON) # see all output
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR})

# Define BUILD_TESTING in cmake
INCLUDE(CTest)

# Installation
IF (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  SET(CMAKE_INSTALL_PREFIX "${PROJECT_BINARY_DIR}" CACHE PATH "FOO install prefix" FORCE)
ENDIF()

IF (NOT CMAKE_INSTALL_LIBDIR)
  SET(CMAKE_INSTALL_LIBDIR lib)
ENDIF()
MESSAGE(STATUS "CMAKE_INSTALL_LIBDIR is set ${CMAKE_INSTALL_LIBDIR}")

SET(KINCAT_INSTALL_LIB_PATH     ${CMAKE_INSTALL_LIBDIR})
SET(KINCAT_INSTALL_BIN_PATH     bin)
SET(KINCAT_INSTALL_INCLUDE_PATH include/kincat)
SET(KINCAT_INSTALL_TEST_PATH    unit-test)
SET(KINCAT_INSTALL_EXAMPLE_PATH examples)

LIST(APPEND CMAKE_MODULE_PATH "${KINCAT_SOURCE_DIR}/core/cmake/modules")
MESSAGE(STATUS "KINCAT uses CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}")
  
#
# Options : use KINCAT prefix
#
OPTION(KINCAT_ENABLE_SHARED_BUILD "Flag to enable unit examples" OFF)
OPTION(KINCAT_ENABLE_EXAMPLE "Flag to enable unit examples" OFF)
OPTION(KINCAT_ENABLE_TEST "Flag to enable unit tests" OFF)
OPTION(KINCAT_ENABLE_VERBOSE "Flag to enable KINCAT verbose flag" OFF)
OPTION(KINCAT_ENABLE_DEBUG "Flag to enable KINCAT debug flag" OFF)

OPTION(KINCAT_SITE_TYPE "Site type [char], [short] or [int]")
OPTION(KOKKOS_INSTALL_PATH "Path to Kokkos installation")

INCLUDE_DIRECTORIES(${KINCAT_BINARY_DIR})

# site type
IF (KINCAT_SITE_TYPE)
  IF ((${KINCAT_SITE_TYPE} STREQUAL "char") OR (${KINCAT_SITE_TYPE} STREQUAL "short") OR (${KINCAT_SITE_TYPE} STREQUAL "int"))
  ELSE()
    MESSAGE(FATAL_ERROR "-- KINCAT_SITE_TYPE option is not supported ${KINCAT_SITE_TYPE}. Supported option values are char, short or int")
  ENDIF()
ELSE()
  SET(KINCAT_SITE_TYPE "char")
ENDIF()
MESSAGE(STATUS "KINCAT_SITE_TYPE : ${KINCAT_SITE_TYPE}")

IF (${KINCAT_SITE_TYPE} STREQUAL "char")
  SET(KINCAT_ENABLE_SITE_TYPE_CHAR ON)
ENDIF()
IF (${KINCAT_SITE_TYPE} STREQUAL "short")
  SET(KINCAT_ENABLE_SITE_TYPE_SHORT ON)
ENDIF()
IF (${KINCAT_SITE_TYPE} STREQUAL "int")
  SET(KINCAT_ENABLE_SITE_TYPE_INT ON)
ENDIF()

# KINCAT link libraries for tests
SET(KINCAT_LINK_LIBRARIES kincat)

#
# Boost
#
IF (BOOST_INSTALL_PATH)
  # temporary variable to receive environment varialbe for testing
  SET(KINCAT_BOOST_ROOT_INTERNAL $ENV{BOOST_ROOT})
  IF (KINCAT_BOOST_ROOT_INTERNAL)
    MESSAGE(STATUS "BOOST_ROOT evinroment variable will be overwritten by given BOOST_INSTALL_PATH")
    MESSAGE(STATUS "  BOOST_ROOT : $ENV{BOOST_ROOT}")
    MESSAGE(STATUS "  BOOST_INSTALL_PATH : ${BOOST_INSTALL_PATH}")
  ENDIF()
  SET(ENV{BOOST_ROOT} ${BOOST_INSTALL_PATH})
ENDIF()

FIND_PACKAGE(Boost)
IF (Boost_FOUND)
  MESSAGE(STATUS "Boost version: ${Boost_VERSION}")
  SET(KINCAT_INTERNAL_BOOST_TARGET "Boost::boost")
  SET(KINCAT_ENABLE_TPL_BOOST ON CACHE BOOL "Enable Boost")
  IF (NOT TARGET ${KINCAT_INTERNAL_BOOST_TARGET})
    ADD_LIBRARY(${KINCAT_INTERNAL_BOOST}_TARGET IMPORTED INTERFACE)
    SET_PROPERTY(TARGET ${KINCAT_INTERNAL_BOOST_TARGET} PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${Boost_INCLUDE_DIR})
    SET_PROPERTY(TARGET ${KINCAT_INTERNAL_BOOST_TARGET} PROPERTY INTERFACE_LINK_LIBRARIES ${Boost_LIBRARIES})
  ELSE()
    SET_PROPERTY(TARGET ${KINCAT_INTERNAL_BOOST_TARGET} PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${Boost_INCLUDE_DIR})
    SET_PROPERTY(TARGET ${KINCAT_INTERNAL_BOOST_TARGET} PROPERTY INTERFACE_LINK_LIBRARIES ${Boost_LIBRARIES})
  ENDIF()
  MESSAGE(STATUS "Boost include: ${Boost_INCLUDE_DIR}")
  MESSAGE(STATUS "Boost library: ${Boost_LIBRARIES}")
  LIST(APPEND KINCAT_LINK_LIBRARIES ${KINCAT_INTERNAL_BOOST_TARGET})
ELSE()
  MESSAGE(FATAL_ERROR "-- Boost is not found")
ENDIF()


#
# Boost JSON
#
FIND_PACKAGE(Boost REQUIRED)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
LIST(APPEND KINCAT_LINK_LIBRARIES ${Boost_LIBRARIES})

#
# Kokkos
#
IF (KOKKOS_INSTALL_PATH)
  MESSAGE(STATUS "KINCAT uses Kokkos installed at ${KOKKOS_INSTALL_PATH}")
  FIND_PACKAGE(Kokkos REQUIRED ${KOKKOS_INSTALL_PATH})
  SET(KINCAT_INTERNAL_KOKKOS_TARGET "Kokkos::kokkos")
  SET(KINCAT_ENABLE_TPL_KOKKOS ON CACHE BOOL "Enable Kokkos")
  LIST(APPEND KINCAT_LINK_LIBRARIES ${KINCAT_INTERNAL_KOKKOS_TARGET})
ELSE()
  MESSAGE(FATAL_ERROR "-- Kokkos is required library but KOKKOS_INSTALL_PATH is not provided")
ENDIF()

#
# gtest
#
IF (KINCAT_ENABLE_TEST)
  IF (GTEST_INSTALL_PATH)
    # Interface installed gtest
    MESSAGE("-- KINCAT uses gtest installed at ${GTEST_INSTALL_PATH}")
    FIND_PACKAGE(GTest REQUIRED)
    SET(KINCAT_INTERNAL_GTEST_TARGET "GTest::gtest_main")
  ELSE()
    MESSAGE(FATAL_ERROR "-- TEST is enabled but GTEST_INSTALL_PATH is not provided")    
  ENDIF()
  LIST(APPEND KINCAT_LINK_LIBRARIES ${KINCAT_INTERNAL_GTEST_TARGET})
ENDIF()

# #
# # HDF5 (dumping data)
# #

#
# Link libraries against KINCAT
#
MESSAGE("-- KINCAT_LINK_LIBRARIES = ${KINCAT_LINK_LIBRARIES}")

#
# Define configure-related preprocessor macros
#
CONFIGURE_FILE (
  ${KINCAT_SOURCE_DIR}/core/cmake/KinCat_Config.hpp.in
  ${KINCAT_BINARY_DIR}/KinCat_Config.hpp
  )
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/KinCat_Config.hpp
  DESTINATION "${CMAKE_INSTALL_PREFIX}/${KINCAT_INSTALL_INCLUDE_PATH}")

#
# Process subdirectories
#

ADD_SUBDIRECTORY (core)
IF (KINCAT_ENABLE_TEST)
  ADD_SUBDIRECTORY (unit-test)
ENDIF()
# IF (KINCAT_ENABLE_EXAMPLE)
#   ADD_SUBDIRECTORY (examples)
# ENDIF()


